:- Module(shortpath, [test/2]).
:- use_module(library(solution_sequences),[order_by/2]).
:- use_module(library(lists),[reverse/2]).
node(placeA, placeB, 11).
node(placeA, placeC, 26).
node(placeA, placeD, 37).
node(placeA, placeE, 13).
node(placeA, placeF, 96).
node(placeB, placeE, 73).
node(placeB, placeC, 14).
node(placeC, placeD, 5).
node(placeC, placеH, 24).
node(placeD, placеH, 71).
node(placeE, placeG, 123).
node(placeG, placеH, 20).
node(placeF, placеH, 29).
%:-table(path(_,_,_,min)).
path(A, B,[B, A], C):-node(A, B, C).
path(A, B,[B|Ps],Cost) :-
node(C, B, Cost1),
path(A, C, Ps,Cost0),
Cost is Cost0 + Cost1.

test(Path,Cost):-
    order_by([asc(Cost)],
         (path(placeA, placеH, Path0, Cost),
          reverse(Path0, Path) )).

feature (sparrow):- mall, brown, chirp, you_fly.
feature (cagle) :- large, brown, screech, yos_fly.
feature (pigeon) :- medium, grey, coon, yos_fly.
feature (parrot) :- modium, green, talks, yes_fly.
feature (penguin) :- large, white_black, no_fly.
mall :- ask ('Is the bird small?').
large :- ask('In the bird large?').
modium :- ask('Is the bird medium?').
brown :- ask ('In the bird brown?').
grey :- ask ('Is the bird grey?').
green :- ank ('Is the bird green?').
white_black :- ask ('Is the bird white_black?').
chirp :- ask ('Does the bird chirp?').
screech :-ask('Does the bird screech?').
coos:- ask ('Does the bird coo?').
talks :- ask('Does the bird talk?').
ask (Question) :- write (Question), nl, read (Response),
(Response =yes -> true; Response = no -> false; fail).
recog_bird :- feature (Bird), format ('The bird is a: w-n', [Bird]), l.
recog_bird :- write ('No matching bird found. Try again.').
start :- write ('Guess the bird!'), nl, recog_bird.